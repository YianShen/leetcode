/*
罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。
字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。
数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。

同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。

给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。
*/

/*
解题思路：
  设置区间，最大区间开始，在空字符str后添加相应罗马字符，然后更新num值
  几种情况：
  1)  >= 1000
  2)  >= 500 && < 1000   令 >= 900是特殊情况
  3)  >= 100 && < 500    令 >= 400是特殊情况
  4)  >= 50 && < 100     令 >= 90是特殊情况
  5)  >= 10 && < 50      令 >= 40是特殊情况
  6)  < 10 存入字符串数组
优缺点：
  时间内内存占用都还行；
***************************************************
优化思路(贪心思想)：
  使用map，键值对存储整数和罗马数字
优缺点：
  时间和内存消耗较上一种方法差
***************************************************
*/
*****************************************************************************************
class Solution {
public:
    string intToRoman(int num) {
        int ret = 0;
        string s[10] = {"I","II","III","IV","V","VI","VII","VIII","IX"};
        string str = "";
        while(num != 0){
            if(num >= 1000){
                ret = num / 1000;
                for(int i = 0; i < ret; i++){
                    str += "M";
                } 
                num = num - ret * 1000;
            }
            else if(num >= 500 && num < 1000){
                if(num >= 900){
                    str += "CM";
                    num = num - 900;
                }
                else{
                    str += "D";
                    num = num - 500;
                }
            }
            else if(num >= 100 && num < 500){
                if(num >= 400){
                    str = str + "CD";
                    num = num - 400;
                }
                else{
                    ret = num / 100;
                    for(int i = 0; i < ret; ++i){
                        str += "C";
                    }
                    num = num - ret * 100;
                }
            }
            else if(num >= 50 && num < 100){
                if(num >= 90){
                    str += "XC";
                    num = num - 90;
                }
                else{
                    str += "L";
                    num = num - 50;
                }
            }
            else if(num >= 10 && num < 50){
               if(num >= 40){
                    str = str + "XL";
                    num = num - 40;
                }
                else{
                    ret = num / 10;
                    for(int i = 0; i < ret; ++i){
                        str += "X";
                    }
                    num = num - ret * 10;
                }
            }
            else{
                str += s[num - 1];
                num = 0;
            }
        }
        return str;
    }
};
*****************************************************************************************
class Solution {
public:
    string intToRoman(int num) {
      map<int,string> mapval{{1,"I"},{4,"IV"},{5,"V"},{9,"IX"},{10,"X"},{40,"XL"},{50,"L"}, {90,"XC"},{100,"C"},{400,"CD"},{500,"D"},{900,"CM"}, {1000,"M"};
      map<int,string>::reverse_iterator it = mapval.rbegin();
      string str = "";
      while(it != mapval.rend()){
        if(num >= mapval->first){
          str += mapval->second;
          num = num - mapval->first;
        }
        else{
          it++;
        }
      }
      return str;
    }
}；
