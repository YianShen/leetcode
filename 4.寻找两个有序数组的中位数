/*
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。
*/

/*
存在的几种情况：
1. 一个数组为空
  另一个数组元素个数为1？直接输出
  另一个数组元素个数不为1？分奇偶两种情况
2. 两个数组皆不为空
  运用快速排序思想，将两个数组排序，合并，然后按奇偶情况输出中位数
3. 注意输出double类型，要进行类型转换static_cast<double>()
*/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int* arr = new int[nums1.size() + nums2.size()];
        int i, j, k;
        //****************************nums1为空
        if(nums1.empty()){
            if(nums2.size() == 1) return nums2[0];    //**********nums2元素个数为1
            else if(nums2.size() > 1 && nums2.size() % 2 == 0){
                int mid = nums2.size() / 2;
                double midvalue = (static_cast<double>(nums2[mid - 1]) + static_cast<double>(nums2[mid])) / 2;
                return midvalue;
            } 
            int index = nums2.size() / 2;
            return nums2[index];
        }
        //****************************nums2为空
        else if(nums2.empty()){
           if(nums1.size() == 1) return nums1[0];    //**********nums1元素个数为1
           else if(nums1.size() > 1 && nums1.size() % 2 == 0){
                int mid = nums1.size() / 2;
                double midvalue = (static_cast<double>(nums1[mid - 1]) + static_cast<double>(nums1[mid])) / 2;
                return midvalue;
            }
            int index = nums1.size() / 2;
            return nums1[index];
        }
        //*************************快速排序
        for(i = 0, j = 0, k = 0; i < nums1.size() && j < nums2.size(); k++){
            if(nums1[i] < nums2[j]){
                arr[k] = nums1[i];
                i++;
            }
            else{
                arr[k] = nums2[j];
                j++;
            }
        }
        if(i < nums1.size()){
            for(; i < nums1.size(); i++, k++){
                arr[k] = nums1[i];
            }
        }
        if(j < nums2.size()){
            for(; j < nums2.size(); j++, k++){
                arr[k] = nums2[j];
            }
        }
        //按奇偶输出中位数
        if((nums1.size() + nums2.size()) % 2 == 0){
            int mid = (nums1.size() + nums2.size()) / 2;
            double midvalue = (static_cast<double>(arr[mid - 1]) + static_cast<double>(arr[mid]))/2;
            return midvalue;
        }
        else{
            int mid = (nums1.size() + nums2.size()) / 2;
            return arr[mid];
        }
    }
};
