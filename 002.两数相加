/*
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
*/

/*
列出所有情况：
1. 两个链表都没有到达尾节点
2. l1链表到达尾节点，l2未到达(考虑是否大于等于10；l2节点接到l1后，还需考虑尾节点是否大于等于10)
3. l1链表未到达尾节点，l2到达(考虑是否大于等于10；考虑尾节点是否大于等于10)
4. l1和l2同时到达尾节点(考虑是否大于等于10)
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = l1;
        ListNode* temp = new ListNode(0); 
        while(l1->next != NULL && l2->next != NULL){
            l1->val = l1->val + l2->val;
            if(l1->val >= 10){
                l1->val = l1->val - 10;
                l1->next->val = l1->next->val + 1;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        if(l1->next == NULL && l2->next != NULL){
            l1->val = l1->val + l2->val;
            l1->next = l2->next;
            while(l1->val >= 10){
                l1->val = l1->val -10;
                if(l1->next == NULL){
                    l1->next = temp;
                    temp->val = 0;
                    temp->next = NULL;
                }
                l1->next->val = l1->next->val + 1;
                l1 = l1->next;
            }
        }
        else if(l1->next != NULL && l2->next == NULL){
            l1->val = l1->val + l2->val;
            while(l1->val >= 10){
                l1->val = l1->val -10;
                if(l1->next == NULL){
                    l1->next = temp;
                    temp->val = 0;
                    temp->next = NULL;
                }
                l1->next->val = l1->next->val + 1;
                l1 = l1->next;
            }
        }
        else if(l1->next == NULL && l2->next == NULL){
            l1->val = l1->val + l2->val;
            if(l1->val >= 10){
                l1->val = l1->val -10;
                l1->next = temp;
                temp->val = 1;
                temp->next = NULL;
            }
        }
        l1 = head;
        return l1;
    }
};
