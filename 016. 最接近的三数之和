/*
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。
找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。
假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).
*/

/*
方法1：暴力搜索...
      不值得提倡，时间复杂度太高！
*/
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int num = nums.at(0) + nums.at(1) + nums.at(2);
        int min_value = abs(num - target); 
        int rnt_num = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = i + 1; j < nums.size(); j++)
            {
                for(int k = j + 1; k < nums.size(); k++)
                {
                    num = nums.at(i) + nums.at(j) + nums.at(k);
                    if(abs(num - target) <= min_value)
                    {
                        min_value = abs(num - target);
                        rnt_num = num;
                    }
                }
            }
        }
        return rnt_num;
    }
};

/*
使用双指针方法：
1、排序
2、遍历: nums[i], start = i + 1, end = nums.size() - 1;
sum 与 target 比较 ：
      sum > target ---> end--
      sum < target ---> start++
*/
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
       int ans = nums.at(0) + nums.at(1) + nums.at(2);
       sort(nums.begin(), nums.end());
       for(int i = 0; i < nums.size(); i++)
       {
           int start = i + 1;
           int end = nums.size() - 1;
           while(start < end)
           {
               int sum = nums[i] + nums[start] + nums[end];
               if(abs(target - sum) < abs(target - ans))    //找最小的一组数
               {
                   ans = sum;
               }
               if(sum < target)
               {
                   start++;
               }
               else if(sum > target)
               {
                   end--;
               }
               else
               {
                   return sum;
               }
           }
       }
       return ans;
    }
};

